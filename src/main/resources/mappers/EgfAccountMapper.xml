<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.egf.payment.account.dao.mapper.EgfAccountMapper">
  <resultMap id="BaseResultMap" type="com.egf.payment.account.dao.entity.EgfAccountEntity">
    <id column="ACCOUNT_NO" jdbcType="VARCHAR" property="accountNo" />
    <result column="ACCOUNT_TYPE" jdbcType="VARCHAR" property="accountType" />
    <result column="BALANCE" jdbcType="DECIMAL" property="balance" />
    <result column="FREEZE_AMOUNT" jdbcType="DECIMAL" property="freezeAmount" />
    <result column="STATUS" jdbcType="CHAR" property="status" />
    <result column="CARD_ID" jdbcType="VARCHAR" property="cardId" />
    <result column="ALIAS_NAME" jdbcType="VARCHAR" property="aliasName" />
    <result column="ACCOUNT_TITLE" jdbcType="VARCHAR" property="accountTitle" />
    <result column="ACCOUNT_DIRECTION" jdbcType="CHAR" property="accountDirection" />
    <result column="DEPOSIT_AMOUNT" jdbcType="DECIMAL" property="depositAmount" />
    <result column="SYSTEM_AMOUNT" jdbcType="DECIMAL" property="systemAmount" />
    <result column="FREEZE_MODEL" jdbcType="VARCHAR" property="freezeModel" />
    <result column="PREVIOUS_BALANCE" jdbcType="DECIMAL" property="previousBalance" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    ACCOUNT_NO, ACCOUNT_TYPE, BALANCE, FREEZE_AMOUNT, STATUS, CARD_ID, ALIAS_NAME, ACCOUNT_TITLE, 
    ACCOUNT_DIRECTION, DEPOSIT_AMOUNT, SYSTEM_AMOUNT, FREEZE_MODEL, PREVIOUS_BALANCE, 
    CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from egf_account
    where ACCOUNT_NO = #{accountNo,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from egf_account
    where ACCOUNT_NO = #{accountNo,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.egf.payment.account.dao.entity.EgfAccountEntity">
    insert into egf_account (ACCOUNT_NO, ACCOUNT_TYPE, BALANCE, 
      FREEZE_AMOUNT, STATUS, CARD_ID, 
      ALIAS_NAME, ACCOUNT_TITLE, ACCOUNT_DIRECTION, 
      DEPOSIT_AMOUNT, SYSTEM_AMOUNT, FREEZE_MODEL, 
      PREVIOUS_BALANCE, CREATE_TIME, UPDATE_TIME
      )
    values (#{accountNo,jdbcType=VARCHAR}, #{accountType,jdbcType=VARCHAR}, #{balance,jdbcType=DECIMAL}, 
      #{freezeAmount,jdbcType=DECIMAL}, #{status,jdbcType=CHAR}, #{cardId,jdbcType=VARCHAR}, 
      #{aliasName,jdbcType=VARCHAR}, #{accountTitle,jdbcType=VARCHAR}, #{accountDirection,jdbcType=CHAR}, 
      #{depositAmount,jdbcType=DECIMAL}, #{systemAmount,jdbcType=DECIMAL}, #{freezeModel,jdbcType=VARCHAR}, 
      #{previousBalance,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.egf.payment.account.dao.entity.EgfAccountEntity">
    insert into egf_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountNo != null">
        ACCOUNT_NO,
      </if>
      <if test="accountType != null">
        ACCOUNT_TYPE,
      </if>
      <if test="balance != null">
        BALANCE,
      </if>
      <if test="freezeAmount != null">
        FREEZE_AMOUNT,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="cardId != null">
        CARD_ID,
      </if>
      <if test="aliasName != null">
        ALIAS_NAME,
      </if>
      <if test="accountTitle != null">
        ACCOUNT_TITLE,
      </if>
      <if test="accountDirection != null">
        ACCOUNT_DIRECTION,
      </if>
      <if test="depositAmount != null">
        DEPOSIT_AMOUNT,
      </if>
      <if test="systemAmount != null">
        SYSTEM_AMOUNT,
      </if>
      <if test="freezeModel != null">
        FREEZE_MODEL,
      </if>
      <if test="previousBalance != null">
        PREVIOUS_BALANCE,
      </if>
      <if test="createTime != null">
        CREATE_TIME,
      </if>
      <if test="updateTime != null">
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountNo != null">
        #{accountNo,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="freezeAmount != null">
        #{freezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="cardId != null">
        #{cardId,jdbcType=VARCHAR},
      </if>
      <if test="aliasName != null">
        #{aliasName,jdbcType=VARCHAR},
      </if>
      <if test="accountTitle != null">
        #{accountTitle,jdbcType=VARCHAR},
      </if>
      <if test="accountDirection != null">
        #{accountDirection,jdbcType=CHAR},
      </if>
      <if test="depositAmount != null">
        #{depositAmount,jdbcType=DECIMAL},
      </if>
      <if test="systemAmount != null">
        #{systemAmount,jdbcType=DECIMAL},
      </if>
      <if test="freezeModel != null">
        #{freezeModel,jdbcType=VARCHAR},
      </if>
      <if test="previousBalance != null">
        #{previousBalance,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.egf.payment.account.dao.entity.EgfAccountEntity">
    update egf_account
    <set>
      <if test="accountType != null">
        ACCOUNT_TYPE = #{accountType,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        BALANCE = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="freezeAmount != null">
        FREEZE_AMOUNT = #{freezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=CHAR},
      </if>
      <if test="cardId != null">
        CARD_ID = #{cardId,jdbcType=VARCHAR},
      </if>
      <if test="aliasName != null">
        ALIAS_NAME = #{aliasName,jdbcType=VARCHAR},
      </if>
      <if test="accountTitle != null">
        ACCOUNT_TITLE = #{accountTitle,jdbcType=VARCHAR},
      </if>
      <if test="accountDirection != null">
        ACCOUNT_DIRECTION = #{accountDirection,jdbcType=CHAR},
      </if>
      <if test="depositAmount != null">
        DEPOSIT_AMOUNT = #{depositAmount,jdbcType=DECIMAL},
      </if>
      <if test="systemAmount != null">
        SYSTEM_AMOUNT = #{systemAmount,jdbcType=DECIMAL},
      </if>
      <if test="freezeModel != null">
        FREEZE_MODEL = #{freezeModel,jdbcType=VARCHAR},
      </if>
      <if test="previousBalance != null">
        PREVIOUS_BALANCE = #{previousBalance,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ACCOUNT_NO = #{accountNo,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.egf.payment.account.dao.entity.EgfAccountEntity">
    update egf_account
    set ACCOUNT_TYPE = #{accountType,jdbcType=VARCHAR},
      BALANCE = #{balance,jdbcType=DECIMAL},
      FREEZE_AMOUNT = #{freezeAmount,jdbcType=DECIMAL},
      STATUS = #{status,jdbcType=CHAR},
      CARD_ID = #{cardId,jdbcType=VARCHAR},
      ALIAS_NAME = #{aliasName,jdbcType=VARCHAR},
      ACCOUNT_TITLE = #{accountTitle,jdbcType=VARCHAR},
      ACCOUNT_DIRECTION = #{accountDirection,jdbcType=CHAR},
      DEPOSIT_AMOUNT = #{depositAmount,jdbcType=DECIMAL},
      SYSTEM_AMOUNT = #{systemAmount,jdbcType=DECIMAL},
      FREEZE_MODEL = #{freezeModel,jdbcType=VARCHAR},
      PREVIOUS_BALANCE = #{previousBalance,jdbcType=DECIMAL},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where ACCOUNT_NO = #{accountNo,jdbcType=VARCHAR}
  </update>
</mapper>